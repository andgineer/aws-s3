{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"S3BucketObjects","text":""},{"location":"#_1","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 aiobotocore \u0434\u043b\u044f \u043d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0439 \u043e\u0431\u0445\u043e\u0434 \"\u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u0432\" \u0441 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u043c \u0433\u043b\u0443\u0431\u0438\u043d\u044b.</li> <li>\u0413\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u0442 \"\u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0438\" \u043f\u043e \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 API \u0432\u044b\u0437\u043e\u0432\u043e\u0432.</li> <li>\u0421\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u0431\u0445\u043e\u0434\u0430 \u0434\u043b\u0438\u043d\u043d\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a AWS.</li> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u043c\u0435\u0440\u0435 \u0438\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u0437 AWS.</li> </ul> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043b\u043e\u0433\u0438\u043a\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0441\u0442\u0430\u0442\u044c\u0435.</p>"},{"location":"#_2","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"#_3","title":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440","text":"<p><pre><code>import asyncio\nfrom async_s3 import S3BucketObjects\n\n\nasync def main():\n    objects = await S3BucketObjects(\"my-bucket\").list(\"my-prefix/\", max_level=2, max_folders=20)\n\n    for obj in objects:\n        print(obj[\"Key\"])\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u043b\u0443\u0431\u0438\u043d\u0443 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 max_level, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0430.</p> <p>\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>max_folders</code> \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0438 \u043f\u043e \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 API \u0432\u044b\u0437\u043e\u0432\u043e\u0432.</p>"},{"location":"#async","title":"\u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b async","text":"<p>\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e, \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u0437 AWS.</p> <pre><code>async for page in S3BucketObjects(bucket='my-bucket').iter(\"my-prefix/\", max_level=2, max_folders=10):\n    for obj in page:\n        print(obj['Key'])\n</code></pre>"},{"location":"#_4","title":"\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u043e\u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<p>S3BucketObjects</p>"},{"location":"as3/","title":"\u0423\u0442\u0438\u043b\u0438\u0442\u0430 as3","text":"<p>\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0443\u0442\u0438\u043b\u0438\u0442\u0430 \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438\u0437 \u043f\u0430\u043a\u0435\u0442\u0430.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440</p> <pre><code>as3 du s3://my-bucket/my-key -l 1 -f 20 -r 3\n</code></pre> <p>\u041f\u043e\u043a\u0430\u0436\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 <code>s3://my-bucket/my-key</code>.</p> <p>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442 \u0433\u043b\u0443\u0431\u0438\u043d\u0443 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 \u0434\u043e 1. \u0415\u0441\u043b\u0438 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 20 \"\u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u0432\", \u0441\u0442\u0430\u0440\u0430\u0435\u0442\u0441\u044f \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u043e \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 3 \u0440\u0430\u0437\u0430 \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f.</p> <p>\u0414\u0435\u0442\u0430\u043b\u0438 \u0441\u043c. \u0432</p> <pre><code>as3 --help\nas3 du --help\n..\u0438 \u0442.\u0434..\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#_1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":""},{"location":"installation/#pipx","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 pipx","text":"<p><code>pipx</code> \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 \u0441  \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u043f\u0430\u043a\u0435\u0442\u0430\u043c\u0438.</p> MacOSLinuxWindows <p>\u0412 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435: <pre><code>brew install pipx\npipx ensurepath\n</code></pre></p> <p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e Python \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d.</p> <p>\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b:</p> <pre><code>python3 -m pip install --user pipx\npython3 -m pipx ensurepath\n</code></pre> <p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 Python, \u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d.</p> <p>\u0412 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u0435\u0434\u0438\u0442\u0435 (\u0435\u0441\u043b\u0438 Python \u0431\u044b\u043b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0438\u0437 Microsoft Store, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>python3</code> \u0432\u043c\u0435\u0441\u0442\u043e <code>python</code>):</p> <pre><code>python -m pip install --user pipx\n</code></pre>"},{"location":"installation/#async-s3","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 <code>async-s3</code>:","text":"<p>\u0412 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 (\u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435) \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435:</p> <pre><code>pipx install async-s3\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#async_s3","title":"async_s3","text":"<p>S3 Bucket helper utils. Async list objects by folders</p> <p>The file is mandatory for build system to find the package.</p>"},{"location":"reference/#async_s3-classes","title":"Classes","text":""},{"location":"reference/#async_s3.S3BucketObjects","title":"async_s3.S3BucketObjects","text":""},{"location":"reference/#async_s3.S3BucketObjects-attributes","title":"Attributes","text":""},{"location":"reference/#async_s3.S3BucketObjects.semaphore","title":"async_s3.S3BucketObjects.semaphore  <code>instance-attribute</code>","text":"<pre><code>semaphore = Semaphore(parallelism)\n</code></pre>"},{"location":"reference/#async_s3.S3BucketObjects-functions","title":"Functions","text":""},{"location":"reference/#async_s3.S3BucketObjects.iter","title":"async_s3.S3BucketObjects.iter  <code>async</code>","text":"<pre><code>iter(prefix: str = '/', *, max_level: Optional[int] = None, max_folders: Optional[int] = None, delimiter: str = '/') -&gt; AsyncIterator[List[Dict[str, Any]]]\n</code></pre> <p>Generator that yields objects in the bucket with the given prefix.</p> <p>Yield objects by partial chunks (list of AWS S3 object dicts) as they are collected from AWS asynchronously.</p> <p>max_level: The maximum folders depth to traverse in separate requests. If None, traverse all levels. max_folders: The maximum number of folders to load in separate requests. If None, requests all folders. Otherwise, the folders are grouped by prefixes before loading in separate requests. Try to group in the given number of folders if possible. delimiter: The delimiter for \"folders\".</p>"},{"location":"reference/#async_s3.S3BucketObjects.list","title":"async_s3.S3BucketObjects.list  <code>async</code>","text":"<pre><code>list(prefix: str = '/', *, max_level: Optional[int] = None, max_folders: Optional[int] = None, delimiter: str = '/') -&gt; List[Dict[str, Any]]\n</code></pre> <p>List all objects in the bucket with the given prefix.</p> <p>max_level: The maximum folders depth to traverse in separate requests. If None, traverse all levels. max_folders: The maximum number of folders to load in separate requests. If None, requests all folders. Otherwise, the folders are grouped by prefixes before loading in separate requests. Try to group to the given <code>max_folders</code> if possible. delimiter: The delimiter for \"folders\".</p>"},{"location":"reference/#async_s3-modules","title":"Modules","text":""},{"location":"reference/#async_s3.group_by_prefix","title":"async_s3.group_by_prefix","text":""},{"location":"reference/#async_s3.group_by_prefix-functions","title":"Functions","text":""},{"location":"reference/#async_s3.group_by_prefix.find_longest_common_prefix","title":"async_s3.group_by_prefix.find_longest_common_prefix","text":"<pre><code>find_longest_common_prefix(words: List[str]) -&gt; str\n</code></pre> <p>Finds the longest common prefix among a list of words.</p>"},{"location":"reference/#async_s3.group_by_prefix.group_by_prefix","title":"async_s3.group_by_prefix.group_by_prefix","text":"<pre><code>group_by_prefix(words: List[str], desired_group_count: int) -&gt; List[str]\n</code></pre> <p>Groups words by prefixes to create a desired number of word groups.</p> <p>Try to create the desired number of groups if possible.</p>"},{"location":"reference/#async_s3.main","title":"async_s3.main","text":"<p>async-s3.</p>"},{"location":"reference/#async_s3.main-attributes","title":"Attributes","text":""},{"location":"reference/#async_s3.main.PROGRESS_REFRESH_INTERVAL","title":"async_s3.main.PROGRESS_REFRESH_INTERVAL  <code>module-attribute</code>","text":"<pre><code>PROGRESS_REFRESH_INTERVAL = 0.5\n</code></pre>"},{"location":"reference/#async_s3.main.S3PROTO","title":"async_s3.main.S3PROTO  <code>module-attribute</code>","text":"<pre><code>S3PROTO = 's3://'\n</code></pre>"},{"location":"reference/#async_s3.main-classes","title":"Classes","text":""},{"location":"reference/#async_s3.main-functions","title":"Functions","text":""},{"location":"reference/#async_s3.main.as3","title":"async_s3.main.as3","text":"<pre><code>as3() -&gt; None\n</code></pre> <p>Async S3.</p>"},{"location":"reference/#async_s3.main.du","title":"async_s3.main.du","text":"<pre><code>du(s3_url: str, max_level: Optional[int], max_folders: Optional[int], repeat: int, parallelism: int, delimiter: str) -&gt; None\n</code></pre> <p>Show count and size for objects in an S3 bucket.</p> <p>Example: as3 du s3://bucket/key</p>"},{"location":"reference/#async_s3.main.error","title":"async_s3.main.error","text":"<pre><code>error(message: str) -&gt; None\n</code></pre> <p>Print an error message and exit.</p>"},{"location":"reference/#async_s3.main.human_readable_size","title":"async_s3.main.human_readable_size","text":"<pre><code>human_readable_size(size: float, decimal_places: int = 2) -&gt; str\n</code></pre> <p>Convert bytes to a human-readable format.</p>"},{"location":"reference/#async_s3.main.list_objects","title":"async_s3.main.list_objects","text":"<pre><code>list_objects(s3_url: str, max_level: Optional[int] = None, max_folders: Optional[int] = None, repeat: int = 1, parallelism: int = 100, delimiter: str = '/') -&gt; Iterable[Dict[str, Any]]\n</code></pre> <p>List objects in an S3 bucket.</p>"},{"location":"reference/#async_s3.main.list_objects_async","title":"async_s3.main.list_objects_async  <code>async</code>","text":"<pre><code>list_objects_async(s3_url: str, max_level: Optional[int], max_folders: Optional[int], repeat: int, parallelism: int, delimiter: str) -&gt; Iterable[Dict[str, Any]]\n</code></pre> <p>List objects in an S3 bucket.</p>"},{"location":"reference/#async_s3.main.list_objects_options","title":"async_s3.main.list_objects_options","text":"<pre><code>list_objects_options(func: Callable[[Any], None]) -&gt; Callable[[Any], None]\n</code></pre> <p>Add common options to commands using list_objects.</p>"},{"location":"reference/#async_s3.main.list_objects_with_progress","title":"async_s3.main.list_objects_with_progress  <code>async</code>","text":"<pre><code>list_objects_with_progress(s3_list: S3BucketObjects, key: str, max_level: Optional[int], max_folders: Optional[int], delimiter: str) -&gt; Tuple[Iterable[Dict[str, Any]], float]\n</code></pre> <p>List objects in an S3 bucket with a progress bar.</p> <p>Returns:     (The objects, the elapsed time)</p>"},{"location":"reference/#async_s3.main.ls","title":"async_s3.main.ls","text":"<pre><code>ls(s3_url: str, max_level: Optional[int], max_folders: Optional[int], repeat: int, parallelism: int, delimiter: str) -&gt; None\n</code></pre> <p>List objects in an S3 bucket.</p> <p>Example: as3 ls s3://bucket/key</p>"},{"location":"reference/#async_s3.main.print_attempt_info","title":"async_s3.main.print_attempt_info","text":"<pre><code>print_attempt_info(attempt: int, duration: float) -&gt; None\n</code></pre> <p>Print the elapsed time for an attempt.</p>"},{"location":"reference/#async_s3.main.print_average_time","title":"async_s3.main.print_average_time","text":"<pre><code>print_average_time(total_time: float, repeat: int) -&gt; None\n</code></pre> <p>Print the average elapsed time.</p>"},{"location":"reference/#async_s3.main.print_start_info","title":"async_s3.main.print_start_info","text":"<pre><code>print_start_info(s3_url: str, max_level: Optional[int], max_folders: Optional[int], delimiter: str, parallelism: int, repeat: int) -&gt; None\n</code></pre> <p>Print the command parameters.</p>"},{"location":"reference/#async_s3.main.print_summary","title":"async_s3.main.print_summary","text":"<pre><code>print_summary(objects: Iterable[Dict[str, Any]]) -&gt; None\n</code></pre> <p>Print a summary of the objects.</p>"},{"location":"reference/#async_s3.main.split_s3_url","title":"async_s3.main.split_s3_url","text":"<pre><code>split_s3_url(s3_url: str) -&gt; Iterable[str]\n</code></pre> <p>Split an S3 URL into bucket and key.</p>"},{"location":"reference/#async_s3.main.validate_delimiter","title":"async_s3.main.validate_delimiter","text":"<pre><code>validate_delimiter(ctx: Context, param: Parameter, value: str) -&gt; str\n</code></pre> <p>Validate the <code>Delimiter</code> option.</p>"},{"location":"reference/#async_s3.s3_bucket_objects","title":"async_s3.s3_bucket_objects","text":""},{"location":"reference/#async_s3.s3_bucket_objects-attributes","title":"Attributes","text":""},{"location":"reference/#async_s3.s3_bucket_objects.DEFAULT_PARALLELISM","title":"async_s3.s3_bucket_objects.DEFAULT_PARALLELISM  <code>module-attribute</code>","text":"<pre><code>DEFAULT_PARALLELISM = 100\n</code></pre>"},{"location":"reference/#async_s3.s3_bucket_objects-classes","title":"Classes","text":""},{"location":"reference/#async_s3.s3_bucket_objects.S3BucketObjects","title":"async_s3.s3_bucket_objects.S3BucketObjects","text":"Attributes async_s3.s3_bucket_objects.S3BucketObjects.semaphore <code>instance-attribute</code> <pre><code>semaphore = Semaphore(parallelism)\n</code></pre> Functions <code></code> async_s3.s3_bucket_objects.S3BucketObjects.iter <code>async</code> <pre><code>iter(prefix: str = '/', *, max_level: Optional[int] = None, max_folders: Optional[int] = None, delimiter: str = '/') -&gt; AsyncIterator[List[Dict[str, Any]]]\n</code></pre> <p>Generator that yields objects in the bucket with the given prefix.</p> <p>Yield objects by partial chunks (list of AWS S3 object dicts) as they are collected from AWS asynchronously.</p> <p>max_level: The maximum folders depth to traverse in separate requests. If None, traverse all levels. max_folders: The maximum number of folders to load in separate requests. If None, requests all folders. Otherwise, the folders are grouped by prefixes before loading in separate requests. Try to group in the given number of folders if possible. delimiter: The delimiter for \"folders\".</p> <code></code> async_s3.s3_bucket_objects.S3BucketObjects.list <code>async</code> <pre><code>list(prefix: str = '/', *, max_level: Optional[int] = None, max_folders: Optional[int] = None, delimiter: str = '/') -&gt; List[Dict[str, Any]]\n</code></pre> <p>List all objects in the bucket with the given prefix.</p> <p>max_level: The maximum folders depth to traverse in separate requests. If None, traverse all levels. max_folders: The maximum number of folders to load in separate requests. If None, requests all folders. Otherwise, the folders are grouped by prefixes before loading in separate requests. Try to group to the given <code>max_folders</code> if possible. delimiter: The delimiter for \"folders\".</p>"},{"location":"reference/#async_s3.s3_bucket_objects-functions","title":"Functions","text":""},{"location":"reference/#async_s3.s3_bucket_objects.create_session","title":"async_s3.s3_bucket_objects.create_session  <code>cached</code>","text":"<pre><code>create_session() -&gt; AioSession\n</code></pre> <p>Create a session object.</p>"},{"location":"reference/#async_s3.s3_bucket_objects.get_s3_client","title":"async_s3.s3_bucket_objects.get_s3_client","text":"<pre><code>get_s3_client() -&gt; AioBaseClient\n</code></pre> <p>Get S3 client.</p>"}]}