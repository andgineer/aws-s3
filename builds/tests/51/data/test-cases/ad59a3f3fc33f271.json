{"uid":"ad59a3f3fc33f271","name":"test_list_objects_async","fullName":"tests.test_as3#test_list_objects_async","historyId":"41d7995ae193e519343f7d8cf1788abf","time":{"start":1718514380713,"stop":1718514380719,"duration":6},"status":"failed","statusMessage":"AssertionError: assert [] == [{'Key': 'fil...'Size': 5678}]\n  \n  Right contains 2 more items, first extra item: {'Key': 'file1.txt', 'Size': 1234}\n  \n  Full diff:\n  + []\n  - [\n  -     {\n  -         'Key': 'file1.txt',\n  -         'Size': 1234,\n  -     },\n  -     {\n  -         'Key': 'file2.txt',\n  -         'Size': 5678,\n  -     },\n  - ]","statusTrace":"@pytest.mark.asyncio\n    async def test_list_objects_async():\n        mock_result = [\n            {\"Key\": \"file1.txt\", \"Size\": 1234},\n            {\"Key\": \"file2.txt\", \"Size\": 5678},\n        ]\n    \n        with patch('async_s3.main.S3BucketObjects') as MockS3BucketObjects:\n            instance = MockS3BucketObjects.return_value\n            instance.list = AsyncMock(return_value=mock_result)\n    \n            s3_url = \"s3://bucket/key\"\n            max_level = 1\n            max_folders = 1\n            repeat = 1\n            parallelism = 100\n            delimiter = '/'\n    \n            result = await list_objects_async(s3_url, max_level, max_folders, repeat, parallelism, delimiter)\n    \n>           assert result == mock_result\nE           AssertionError: assert [] == [{'Key': 'fil...'Size': 5678}]\nE             \nE             Right contains 2 more items, first extra item: {'Key': 'file1.txt', 'Size': 1234}\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     {\nE             -         'Key': 'file1.txt',\nE             -         'Size': 1234,\nE             -     },\nE             -     {\nE             -         'Key': 'file2.txt',\nE             -         'Size': 5678,\nE             -     },\nE             - ]\n\ntests/test_as3.py:91: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1718514380617,"stop":1718514380618,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"set_fake_aws_credentials","time":{"start":1718514380618,"stop":1718514380618,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1718514380712,"stop":1718514380712,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert [] == [{'Key': 'fil...'Size': 5678}]\n  \n  Right contains 2 more items, first extra item: {'Key': 'file1.txt', 'Size': 1234}\n  \n  Full diff:\n  + []\n  - [\n  -     {\n  -         'Key': 'file1.txt',\n  -         'Size': 1234,\n  -     },\n  -     {\n  -         'Key': 'file2.txt',\n  -         'Size': 5678,\n  -     },\n  - ]","statusTrace":"@pytest.mark.asyncio\n    async def test_list_objects_async():\n        mock_result = [\n            {\"Key\": \"file1.txt\", \"Size\": 1234},\n            {\"Key\": \"file2.txt\", \"Size\": 5678},\n        ]\n    \n        with patch('async_s3.main.S3BucketObjects') as MockS3BucketObjects:\n            instance = MockS3BucketObjects.return_value\n            instance.list = AsyncMock(return_value=mock_result)\n    \n            s3_url = \"s3://bucket/key\"\n            max_level = 1\n            max_folders = 1\n            repeat = 1\n            parallelism = 100\n            delimiter = '/'\n    \n            result = await list_objects_async(s3_url, max_level, max_folders, repeat, parallelism, delimiter)\n    \n>           assert result == mock_result\nE           AssertionError: assert [] == [{'Key': 'fil...'Size': 5678}]\nE             \nE             Right contains 2 more items, first extra item: {'Key': 'file1.txt', 'Size': 1234}\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     {\nE             -         'Key': 'file1.txt',\nE             -         'Size': 1234,\nE             -     },\nE             -     {\nE             -         'Key': 'file2.txt',\nE             -         'Size': 5678,\nE             -     },\nE             - ]\n\ntests/test_as3.py:91: AssertionError","steps":[],"attachments":[{"uid":"89500b23161e041b","name":"stdout","source":"89500b23161e041b.txt","type":"text/plain","size":138}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1718514380766,"stop":1718514380766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1718514380766,"stop":1718514380766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1718514380766,"stop":1718514380766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1718514380766,"stop":1718514380767,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"set_fake_aws_credentials::0","time":{"start":1718514388361,"stop":1718514388361,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_as3"},{"name":"host","value":"fv-az1437-559"},{"name":"thread","value":"2252-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_as3"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":11,"unknown":0,"total":12},"items":[{"uid":"8c065cc2c05d957c","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/49//#testresult/8c065cc2c05d957c","status":"passed","time":{"start":1718441775954,"stop":1718441775955,"duration":1}},{"uid":"a670add0b42ee089","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/48//#testresult/a670add0b42ee089","status":"passed","time":{"start":1718430742124,"stop":1718430742126,"duration":2}},{"uid":"27ee83e8aa631c5d","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/47//#testresult/27ee83e8aa631c5d","status":"passed","time":{"start":1718425075331,"stop":1718425075332,"duration":1}},{"uid":"ef6dd204194e1a33","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/45//#testresult/ef6dd204194e1a33","status":"passed","time":{"start":1718364470993,"stop":1718364470995,"duration":2}},{"uid":"5eb5bc3e926ad8bd","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/44//#testresult/5eb5bc3e926ad8bd","status":"passed","time":{"start":1718363909815,"stop":1718363909816,"duration":1}},{"uid":"485438f5027e93e7","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/43//#testresult/485438f5027e93e7","status":"passed","time":{"start":1718252937043,"stop":1718252937044,"duration":1}},{"uid":"dab793519b809319","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/42//#testresult/dab793519b809319","status":"passed","time":{"start":1718186913206,"stop":1718186913208,"duration":2}},{"uid":"6d0da5f53c29a0b","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/41//#testresult/6d0da5f53c29a0b","status":"passed","time":{"start":1718080532015,"stop":1718080532016,"duration":1}},{"uid":"8b9d3a72b9f39513","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/39//#testresult/8b9d3a72b9f39513","status":"passed","time":{"start":1718078984136,"stop":1718078984138,"duration":2}},{"uid":"8a25df5df816ab0b","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/38//#testresult/8a25df5df816ab0b","status":"passed","time":{"start":1717994021083,"stop":1717994021085,"duration":2}},{"uid":"94995034e440fd0f","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/37//#testresult/94995034e440fd0f","status":"passed","time":{"start":1717993121450,"stop":1717993121452,"duration":2}}]},"tags":["asyncio"]},"source":"ad59a3f3fc33f271.json","parameterValues":[]}