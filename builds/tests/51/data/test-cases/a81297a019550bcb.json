{"uid":"a81297a019550bcb","name":"test_list_objects_async_repeat","fullName":"tests.test_as3#test_list_objects_async_repeat","historyId":"45b12f7ee02cb52636bec80e9a6a982d","time":{"start":1718514380771,"stop":1718514380781,"duration":10},"status":"failed","statusMessage":"AssertionError: assert [] == [{'Key': 'fil...'Size': 5678}]\n  \n  Right contains 2 more items, first extra item: {'Key': 'file1.txt', 'Size': 1234}\n  \n  Full diff:\n  + []\n  - [\n  -     {\n  -         'Key': 'file1.txt',\n  -         'Size': 1234,\n  -     },\n  -     {\n  -         'Key': 'file2.txt',\n  -         'Size': 5678,\n  -     },\n  - ]","statusTrace":"@pytest.mark.asyncio\n    async def test_list_objects_async_repeat():\n        mock_result = [\n            {\"Key\": \"file1.txt\", \"Size\": 1234},\n            {\"Key\": \"file2.txt\", \"Size\": 5678},\n        ]\n    \n        with patch('async_s3.main.S3BucketObjects') as MockS3BucketObjects:\n            instance = MockS3BucketObjects.return_value\n            instance.list = AsyncMock(return_value=mock_result)\n    \n            s3_url = \"s3://bucket/key\"\n            max_level = 1\n            max_folders = 1\n            repeat = 3\n            parallelism = 100\n            delimiter = '/'\n    \n            result = await list_objects_async(s3_url, max_level, max_folders, repeat, parallelism, delimiter)\n    \n>           assert result == mock_result\nE           AssertionError: assert [] == [{'Key': 'fil...'Size': 5678}]\nE             \nE             Right contains 2 more items, first extra item: {'Key': 'file1.txt', 'Size': 1234}\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     {\nE             -         'Key': 'file1.txt',\nE             -         'Size': 1234,\nE             -     },\nE             -     {\nE             -         'Key': 'file2.txt',\nE             -         'Size': 5678,\nE             -     },\nE             - ]\n\ntests/test_as3.py:114: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1718514380617,"stop":1718514380618,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"set_fake_aws_credentials","time":{"start":1718514380618,"stop":1718514380618,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1718514380770,"stop":1718514380770,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert [] == [{'Key': 'fil...'Size': 5678}]\n  \n  Right contains 2 more items, first extra item: {'Key': 'file1.txt', 'Size': 1234}\n  \n  Full diff:\n  + []\n  - [\n  -     {\n  -         'Key': 'file1.txt',\n  -         'Size': 1234,\n  -     },\n  -     {\n  -         'Key': 'file2.txt',\n  -         'Size': 5678,\n  -     },\n  - ]","statusTrace":"@pytest.mark.asyncio\n    async def test_list_objects_async_repeat():\n        mock_result = [\n            {\"Key\": \"file1.txt\", \"Size\": 1234},\n            {\"Key\": \"file2.txt\", \"Size\": 5678},\n        ]\n    \n        with patch('async_s3.main.S3BucketObjects') as MockS3BucketObjects:\n            instance = MockS3BucketObjects.return_value\n            instance.list = AsyncMock(return_value=mock_result)\n    \n            s3_url = \"s3://bucket/key\"\n            max_level = 1\n            max_folders = 1\n            repeat = 3\n            parallelism = 100\n            delimiter = '/'\n    \n            result = await list_objects_async(s3_url, max_level, max_folders, repeat, parallelism, delimiter)\n    \n>           assert result == mock_result\nE           AssertionError: assert [] == [{'Key': 'fil...'Size': 5678}]\nE             \nE             Right contains 2 more items, first extra item: {'Key': 'file1.txt', 'Size': 1234}\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     {\nE             -         'Key': 'file1.txt',\nE             -         'Size': 1234,\nE             -     },\nE             -     {\nE             -         'Key': 'file2.txt',\nE             -         'Size': 5678,\nE             -     },\nE             - ]\n\ntests/test_as3.py:114: AssertionError","steps":[],"attachments":[{"uid":"297c43dddb501343","name":"stdout","source":"297c43dddb501343.txt","type":"text/plain","size":229}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1718514380788,"stop":1718514380788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1718514380788,"stop":1718514380788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1718514380788,"stop":1718514380788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1718514380788,"stop":1718514380789,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"set_fake_aws_credentials::0","time":{"start":1718514388361,"stop":1718514388361,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_as3"},{"name":"host","value":"fv-az1437-559"},{"name":"thread","value":"2252-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_as3"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":11,"unknown":0,"total":12},"items":[{"uid":"d681b7c1f637c115","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/49//#testresult/d681b7c1f637c115","status":"passed","time":{"start":1718441775960,"stop":1718441775962,"duration":2}},{"uid":"f7f1d19b08a1dfdb","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/48//#testresult/f7f1d19b08a1dfdb","status":"passed","time":{"start":1718430742131,"stop":1718430742133,"duration":2}},{"uid":"b4a354208e625d7c","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/47//#testresult/b4a354208e625d7c","status":"passed","time":{"start":1718425075338,"stop":1718425075340,"duration":2}},{"uid":"6f01d43efda4eea1","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/45//#testresult/6f01d43efda4eea1","status":"passed","time":{"start":1718364471000,"stop":1718364471002,"duration":2}},{"uid":"6e30ea064545c82d","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/44//#testresult/6e30ea064545c82d","status":"passed","time":{"start":1718363909822,"stop":1718363909824,"duration":2}},{"uid":"7cf9000ac959321f","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/43//#testresult/7cf9000ac959321f","status":"passed","time":{"start":1718252937049,"stop":1718252937051,"duration":2}},{"uid":"7a4fbc96448801a7","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/42//#testresult/7a4fbc96448801a7","status":"passed","time":{"start":1718186913214,"stop":1718186913215,"duration":1}},{"uid":"5b58337a04e75bd5","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/41//#testresult/5b58337a04e75bd5","status":"passed","time":{"start":1718080532022,"stop":1718080532023,"duration":1}},{"uid":"c5174eacf19829da","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/39//#testresult/c5174eacf19829da","status":"passed","time":{"start":1718078984143,"stop":1718078984144,"duration":1}},{"uid":"9ccbdafef2d9484","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/38//#testresult/9ccbdafef2d9484","status":"passed","time":{"start":1717994021090,"stop":1717994021091,"duration":1}},{"uid":"eeaea505ac5250eb","reportUrl":"https://andgineer.github.io/async-s3/builds/tests/37//#testresult/eeaea505ac5250eb","status":"passed","time":{"start":1717993121457,"stop":1717993121458,"duration":1}}]},"tags":["asyncio"]},"source":"a81297a019550bcb.json","parameterValues":[]}